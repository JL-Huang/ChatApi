name: Deploy to Server

on:
  push:
    branches:
      - main

env:
  CHAT_IMAGE_NAME: huangjingliang/chat-api
  RAG_IMAGE_NAME: huangjingliang/rag-api

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Á°Æ‰øùÂèØ‰ª•‰ΩøÁî® git diff

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      id: ssh-setup

    # Step 1: Check for changes in Dockerfile or code
    - name: Check for changes in chat and rag services
      id: check_changes
      run: |
        git fetch --all
        git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changes.txt

        CHAT_BUILD=false
        RAG_BUILD=false

        if grep -q 'chat/Dockerfile' changes.txt || grep -q 'chat/requirements.txt' changes.txt; then
          echo "Changes detected in Chat service, proceeding with build."
          CHAT_BUILD=true
        fi

        if grep -q 'rag/Dockerfile' changes.txt || grep -q 'rag/requirements.txt' changes.txt; then
          echo "Changes detected in RAG service, proceeding with build."
          RAG_BUILD=true
        fi

        echo "CHAT_BUILD=${CHAT_BUILD}" >> $GITHUB_ENV
        echo "RAG_BUILD=${RAG_BUILD}" >> $GITHUB_ENV

    # Step 2: Log in to Docker Hub
    - name: Log in to Docker Hub
      if: env.CHAT_BUILD == 'true' || env.RAG_BUILD == 'true'
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Step 3: Build and Push Docker Images
    - name: Build and Push Chat Docker Image
      if: env.CHAT_BUILD == 'true'
      run: |
        docker build -t $CHAT_IMAGE_NAME:latest ./chat
        docker push $CHAT_IMAGE_NAME:latest

    - name: Build and Push RAG Docker Image
      if: env.RAG_BUILD == 'true'
      run: |
        docker build -t $RAG_IMAGE_NAME:latest ./rag
        docker push $RAG_IMAGE_NAME:latest

    # Step 4: Deploy to server via SSH
    - name: Deploy to server via SSH
      run: |
        echo "Starting deployment process..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -x
          echo "üìÅ Changing to project directory..."
          cd /root/Project/ChatApi

          echo "üì¶ Pulling latest code from Git..."
          git pull origin main >> git_pull.log 2>&1
          tail -n 20 git_pull.log

          echo "üê≥ Pulling latest Chat Docker image from Docker Hub..."
          docker pull $CHAT_IMAGE_NAME:latest >> docker_pull.log 2>&1
          tail -n 20 docker_pull.log

          echo "üê≥ Pulling latest RAG Docker image from Docker Hub..."
          docker pull $RAG_IMAGE_NAME:latest >> docker_pull.log 2>&1
          tail -n 20 docker_pull.log

          echo "üõë Stopping and removing old containers..."
          docker stop chat-api-container || true
          docker rm chat-api-container || true
          docker stop rag-api-container || true
          docker rm rag-api-container || true

          echo "üöÄ Starting new containers..."
          docker-compose -f docker-compose.prod.yml up -d  # ‰ΩøÁî® docker-compose.prod.yml ÂêØÂä®ÊúçÂä°

          echo "‚úÖ Deployment finished. Chat API and RAG API are running."
        EOF
